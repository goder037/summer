package com.rocket.summer.framework.boot.autoconfigure;

/**
 * Filter that can be registered in {@code spring.factories} to limit the
 * auto-configuration classes considered. This interface is designed to allow fast removal
 * of auto-configuration classes before their bytecode is even read.
 * <p>
 * An {@link AutoConfigurationImportFilter} may implement any of the following
 * {@link com.rocket.summer.framework.beans.factory.Aware Aware} interfaces, and their respective
 * methods will be called prior to {@link #match}:
 * <ul>
 * <li>{@link EnvironmentAware}</li>
 * <li>{@link BeanFactoryAware}</li>
 * <li>{@link BeanClassLoaderAware}</li>
 * <li>{@link ResourceLoaderAware}</li>
 * </ul>
 *
 * @author Phillip Webb
 * @since 1.5.0
 */
public interface AutoConfigurationImportFilter {

    /**
     * Apply the filter to the given auto-configuration class candidates.
     * @param autoConfigurationClasses the auto-configuration classes being considered.
     * Implementations should not change the values in this array.
     * @param autoConfigurationMetadata access to the meta-data generated by the
     * auto-configure annotation processor
     * @return a boolean array indicating which of the auto-configuration classes should
     * be imported. The returned array must be the same size as the incoming
     * {@code autoConfigurationClasses} parameter. Entries containing {@code false} will
     * not be imported.
     */
    boolean[] match(String[] autoConfigurationClasses,
                    AutoConfigurationMetadata autoConfigurationMetadata);

}
